package gui.add_forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import data_helpers.AppLogger;
import data.models.Email;

import javax.swing.*;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import java.awt.*;
import java.util.List;

public class EmailAdding extends JDialog {
    private JTextField emailTextField;
    private JButton addButton;
    private JButton closeButton;
    private JPanel emailPanel;

    public EmailAdding(JFrame frame, List<Email> emailRecords) {

        super(frame);

        frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        String warning = "Предупреждение";

        setTitle("Добавление электронной почты");
        setContentPane(emailPanel);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setSize(650, 200);
        setLocationRelativeTo(frame);

        addButton.addActionListener(e -> {
            try {

                String emailString = emailTextField.getText().trim();
                if (emailString.isEmpty() || !emailString.matches("^[&\\w._-]+@([&\\w_-]+\\.)+\\w+$")) {
                    String message = "Электронная почта указана неверно (пример test@mail.ru)!!!";
                    JOptionPane.showMessageDialog(this, message, warning, JOptionPane.WARNING_MESSAGE);
                    return;
                }

                frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                Email email = new Email();
                email.setId((byte) (emailRecords.size() + 1));
                email.setEmail(emailString);

                if (emailRecords.parallelStream().anyMatch(o -> o.equals(email))) {
                    frame.setCursor(Cursor.getDefaultCursor());
                    String message = "Такая электронная почта уже вводилась!!!";
                    JOptionPane.showMessageDialog(this, message, warning, JOptionPane.WARNING_MESSAGE);
                    return;
                }

                emailRecords.add(email);
                frame.repaint();

                frame.setCursor(Cursor.getDefaultCursor());

                dispose();

            } catch (Exception ex) {
                frame.setCursor(Cursor.getDefaultCursor());
                AppLogger.fatal(this, ex);
            }
        });

        closeButton.addActionListener(e -> {
            try {
                dispose();
            } catch (Exception ex) {
                AppLogger.fatal(this, ex);
            }
        });

        emailTextField.setHighlighter(null);
        ((AbstractDocument) emailTextField.getDocument()).setDocumentFilter(new DocumentFilter() {

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if ((text.matches("^[@&\\w._-]$") || text.matches("^[&\\w._-]+@([&\\w_-]+\\.)+\\w+$")) && (200 - fb.getDocument().getLength()) >= text.length())
                    super.replace(fb, offset, length, text, attrs);
            }
        });

        setModal(true);
        setVisible(true);

        frame.setCursor(Cursor.getDefaultCursor());

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        emailPanel = new JPanel();
        emailPanel.setLayout(new GridLayoutManager(5, 2, new Insets(20, 20, 20, 20), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(2);
        label1.setText("  Электронная почта  ");
        emailPanel.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, Font.BOLD, 18, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-16777216));
        label2.setHorizontalAlignment(0);
        label2.setHorizontalTextPosition(0);
        label2.setText("  Электронная почта  ");
        emailPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailTextField = new JTextField();
        Font emailTextFieldFont = this.$$$getFont$$$(null, Font.PLAIN, 18, emailTextField.getFont());
        if (emailTextFieldFont != null) emailTextField.setFont(emailTextFieldFont);
        emailPanel.add(emailTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        emailPanel.add(spacer1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        emailPanel.add(spacer2, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        addButton = new JButton();
        Font addButtonFont = this.$$$getFont$$$(null, -1, 20, addButton.getFont());
        if (addButtonFont != null) addButton.setFont(addButtonFont);
        addButton.setText("  Добавить электронную почту  ");
        emailPanel.add(addButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 50), null, null, 0, false));
        closeButton = new JButton();
        Font closeButtonFont = this.$$$getFont$$$(null, -1, 20, closeButton.getFont());
        if (closeButtonFont != null) closeButton.setFont(closeButtonFont);
        closeButton.setText("  Закрыть  ");
        emailPanel.add(closeButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 50), null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return emailPanel;
    }

}
