package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import data_helpers.JDBCHelper;
import data.data_helpers.LoginLogger;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.io.File;
import java.net.BindException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.SQLException;

public class LetterLogin extends JFrame {
    private JPanel loginPanel;
    private JTextField loginField;
    private JTextField passwordField;
    private JButton loginButton;
    private JButton closeButton;
    private JPanel loginPanel2;

    private static ServerSocket serverSocket;

    private LetterLogin() {

        setTitle("Сортировка отчётов");
        setContentPane(loginPanel);
        setSize(400, 300);
        setResizable(false);
        setLocationRelativeTo(null);
        setUndecorated(true);

        closeButton.addActionListener(e -> System.exit(0));
        loginButton.addActionListener(e -> {

            try {

                String login = loginField.getText();
                String password = passwordField.getText();

                if (login.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Введите учётные данные!!!", "Предупреждение", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                JDBCHelper.pasportSecurity.setPasportUsername(login);
                JDBCHelper.pasportSecurity.setPasportPassword(password);

                int timeout = 10000;

                try {

                    try (Connection pasportConnection = JDBCHelper.getPasportConnection()) {
                        if (pasportConnection.isValid(timeout)) {
                            // new LetterAdding(serverSocket);
                            setCursor(Cursor.getDefaultCursor());
                            dispose();
                        } else {
                            setCursor(Cursor.getDefaultCursor());
                            JOptionPane.showMessageDialog(this, "Проверьте соединение с базой!!!", "Предупреждение", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }

                } catch (SQLException ex) {
                    setCursor(Cursor.getDefaultCursor());
                    JOptionPane.showMessageDialog(this, "Учётные данные введены неверно!!!", "Предупреждение", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (Exception ex) {
                setCursor(Cursor.getDefaultCursor());
                LoginLogger.fatal(this, ex);
            }
        });

        setAlwaysOnTop(true);
        setVisible(true);

        requestFocus();
        setAlwaysOnTop(false);

        String warning = "Предупреждение";
        File homeDirectory = new File(".");
        Path homePath = homeDirectory.toPath();
        String homeParent = homeDirectory.getAbsolutePath();
        homeParent = homeParent.substring(0, homeParent.length() - 2);
        if (!Files.isReadable(homePath)) {
            String message = "Нет прав на чтение \nв директории " + homeParent + "!!!";
            JOptionPane.showMessageDialog(this, message, warning, JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }

        if (!Files.isWritable(homePath)) {
            String message = "Нет прав на запись \nв директории " + homeParent + "!!!";
            JOptionPane.showMessageDialog(this, message, warning, JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }

        if (!Files.isExecutable(homePath)) {
            String message = "Нет прав на выполнение \nв директории " + homeParent + "!!!";
            JOptionPane.showMessageDialog(this, message, warning, JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }

    }

    public static void main(String[] args) {

        try {
            serverSocket = new ServerSocket(9990, 1, InetAddress.getLocalHost());
        } catch (BindException b) {
            System.exit(0);
        } catch (Exception e) {
            LoginLogger.fatal(null, e);
        }

        new LetterLogin();

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        loginPanel2 = new JPanel();
        loginPanel2.setLayout(new GridLayoutManager(6, 3, new Insets(10, 10, 10, 10), -1, -1));
        loginPanel.add(loginPanel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loginPanel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-851769)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, loginPanel2.getFont())));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 20, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("  Учётные данные  ");
        loginPanel2.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, -1, 16, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("  Логин  ");
        loginPanel2.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, -1, 16, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("  Пароль  ");
        loginPanel2.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginButton = new JButton();
        Font loginButtonFont = this.$$$getFont$$$(null, -1, 18, loginButton.getFont());
        if (loginButtonFont != null) loginButton.setFont(loginButtonFont);
        loginButton.setHorizontalTextPosition(0);
        loginButton.setText("  Войти  ");
        loginPanel2.add(loginButton, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 40), null, null, 0, false));
        closeButton = new JButton();
        Font closeButtonFont = this.$$$getFont$$$(null, -1, 18, closeButton.getFont());
        if (closeButtonFont != null) closeButton.setFont(closeButtonFont);
        closeButton.setHorizontalTextPosition(0);
        closeButton.setText("  Закрыть  ");
        loginPanel2.add(closeButton, new GridConstraints(4, 0, 2, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 40), null, null, 0, false));
        loginField = new JTextField();
        Font loginFieldFont = this.$$$getFont$$$(null, -1, 16, loginField.getFont());
        if (loginFieldFont != null) loginField.setFont(loginFieldFont);
        loginPanel2.add(loginField, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 30), new Dimension(150, -1), null, 0, false));
        passwordField = new JPasswordField();
        Font passwordFieldFont = this.$$$getFont$$$(null, -1, 16, passwordField.getFont());
        if (passwordFieldFont != null) passwordField.setFont(passwordFieldFont);
        loginPanel2.add(passwordField, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 30), new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return loginPanel;
    }

}
